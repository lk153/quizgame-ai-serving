// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/lk153/quizgame-ai-serving/internal/adapters/config"
	"github.com/lk153/quizgame-ai-serving/internal/adapters/http"
	"github.com/lk153/quizgame-ai-serving/internal/adapters/storage"
	"github.com/lk153/quizgame-ai-serving/internal/adapters/storage/mongo"
	"github.com/lk153/quizgame-ai-serving/internal/adapters/storage/mongo/repository"
	"github.com/lk153/quizgame-ai-serving/internal/core/services"
	"github.com/lk153/quizgame-ai-serving/internal/core/services/taskResult"
)

// Injectors from wire.go:

func initializeHandlers(ctx context.Context, rg *gin.RouterGroup, db *mongo.DB, rd *config.Redis) Handlers {
	taskResultRepository := repository.NewTaskResultRepository(db)
	redis := storage.ProvideRedis(ctx, rd)
	taskResultService := taskresult.NewTaskResultService(taskResultRepository, redis)
	taskResultHandler := http.NewTaskResultHandler(taskResultService, rg)
	handlers := Handlers{
		TaskResultHandler: taskResultHandler,
	}
	return handlers
}

// wire.go:

type Handlers struct {
	TaskResultHandler http.TaskResultHandler
}

var HandlerSet = wire.NewSet(http.NewTaskResultHandler, wire.Struct(new(Handlers), "TaskResultHandler"))

var SuperSet = wire.NewSet(services.ServiceSet, HandlerSet, storage.StorageSet)

func initializeDB(ctx context.Context, config2 *config.DB) (*mongo.DB, error) {
	return mongo.New(ctx, config2)
}
